apiVersion: v1
kind: Namespace
metadata:
  name: k8s-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-python-k8s
  namespace: k8s-api
  labels:
    app: api-python-k8s
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-python-k8s
  template:
    metadata:
      labels:
        app: api-python-k8s
    spec:
    #Para rodar no master (apenas) dentro do kubeAdm 
      tolerations:
      - key: "node-role.kubernetes.io/control-plane"
        operator: "Exists"
        effect: "NoSchedule"
      nodeSelector:
        node-role.kubernetes.io/control-plane: ""
      serviceAccountName: api-python-k8s-sa
      containers:
      - name: api-python-k8s
        image: adenilsonkon/api-python-k8s:v7.3
        ports:
        - containerPort: 5000
        volumeMounts:
        - name: kube-config
          mountPath: /root/.kube
          readOnly: true
      volumes:
      - name: kube-config
        hostPath:
          # para uso no WSL path: /mnt/c/Users/<user>/.kube/config
          path: /home/admin/.kube/config
          type: File
---
apiVersion: v1
kind: Service
metadata:
  name: api-python-k8s-service
  namespace: k8s-api
spec:
  selector:
    app: api-python-k8s
  ports:
    - protocol: TCP
      port: 5000
  type: ClusterIP  

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-python-k8s-sa
  namespace: k8s-api
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-reader
  namespace: api-ns
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list", "get", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pod-reader-binding
  namespace: api-ns
subjects:
- kind: ServiceAccount
  name: api-python-k8s-sa
  namespace: k8s-api
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
---
